- name: create user with basic select privileges
  when: current_append_privs ==  "yes"
  community.dumping_ground.mysql_user:
    name: '{{ user_name_2 }}'
    password: '{{ user_password_2 }}'
    priv: '*.*:SELECT'
    state: present
    login_unix_socket: '{{ mysql_socket }}'
- include: assert_user.yml user_name={{user_name_2}} priv='SELECT'
  when: current_append_privs ==  "yes"
- name: create user with current privileges (expect changed=true)
  register: result
  community.dumping_ground.mysql_user:
    name: '{{ user_name_2 }}'
    password: '{{ user_password_2 }}'
    priv: '*.*:{{current_privilege}}'
    append_privs: '{{current_append_privs}}'
    state: present
    login_unix_socket: '{{ mysql_socket }}'
- name: assert output message for current privileges
  assert:
    that: result.changed == true
- name: run command to show privileges for user (expect privileges in stdout)
  command: mysql "-e SHOW GRANTS FOR '{{user_name_2}}'@'localhost';"
  register: result
- name: assert user has correct privileges
  assert:
    that: '''GRANT {{current_privilege | replace('','', '', '')}} ON *.*'' in result.stdout'
  when: current_append_privs ==  "no"
- name: assert user has correct privileges
  assert:
    that: '''GRANT SELECT, {{current_privilege | replace('','', '', '')}} ON *.*''
      in result.stdout'
  when: current_append_privs ==  "yes"
- name: create database using user current privileges
  ignore_errors: true
  community.dumping_ground.mysql_db:
    name: '{{ db_name }}'
    state: present
    login_user: '{{ user_name_2 }}'
    login_password: '{{ user_password_2 }}'
- name: run command to test that database was not created
  command: mysql "-e show databases like '{{ db_name }}';"
  register: result
- name: assert database was not created
  assert:
    that: '''{{ db_name }}'' not in result.stdout'
- name: Add privs to a specific table (expect changed)
  register: result
  community.dumping_ground.mysql_user:
    name: '{{ user_name_2 }}'
    password: '{{ user_password_2 }}'
    priv: jmainguy.jmainguy:ALL
    state: present
    login_unix_socket: '{{ mysql_socket }}'
- name: Assert that priv changed
  assert:
    that: result.changed == true
- name: Add privs to a specific table (expect ok)
  register: result
  community.dumping_ground.mysql_user:
    name: '{{ user_name_2 }}'
    password: '{{ user_password_2 }}'
    priv: jmainguy.jmainguy:ALL
    state: present
    login_unix_socket: '{{ mysql_socket }}'
- name: Assert that priv did not change
  assert:
    that: result.changed == false
- name: update user with all privileges
  community.dumping_ground.mysql_user:
    name: '{{ user_name_2 }}'
    password: '{{ user_password_2 }}'
    priv: '*.*:ALL'
    state: present
    login_unix_socket: '{{ mysql_socket }}'
- include: assert_user.yml user_name={{user_name_2}} priv='ALL PRIVILEGES'
- name: create database using user
  community.dumping_ground.mysql_db:
    name: '{{ db_name }}'
    state: present
    login_user: '{{ user_name_2 }}'
    login_password: '{{ user_password_2 }}'
- name: run command to test database was created using user new privileges
  command: mysql "-e SHOW CREATE DATABASE {{ db_name }};"
- name: drop database using user
  community.dumping_ground.mysql_db:
    name: '{{ db_name }}'
    state: absent
    login_user: '{{ user_name_2 }}'
    login_password: '{{ user_password_2 }}'
- name: remove username
  community.dumping_ground.mysql_user:
    name: '{{ user_name_2 }}'
    password: '{{ user_password_2 }}'
    state: absent
    login_unix_socket: '{{ mysql_socket }}'
