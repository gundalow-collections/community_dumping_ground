- set_fact: set_name='version'
- name: read mysql variables (expect changed=false)
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_var_output.yml changed=false output={{result}} var_name={{set_name}}
- set_fact:
    set_name: delay_key_write
    set_value: 'ON'
- name: set mysql variable
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '{{set_value}}'
    login_user: root
    login_password: '{{ root_pass }}'
    login_unix_socket: '{{ mysql_socket }}'
- name: update mysql variable to same value (expect changed=false)
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '{{set_value}}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_var.yml changed=false output={{result}} var_name={{set_name}} var_value={{set_value}}
- set_fact:
    set_name: wait_timeout
    set_value: '300'
- name: set mysql variable to a temp value
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '200'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- name: update mysql variable value (expect changed=true)
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '{{set_value}}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- assert:
    that:
    - result.queries == ["SET GLOBAL `{{ set_name }}` = {{ set_value }}"]
- include: assert_var.yml changed=true output={{result}} var_name={{set_name}} var_value='{{set_value}}'
- set_fact:
    set_name: wait_timeout
    set_value: '400'
- name: set mysql variable to a temp value
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '200'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- name: update mysql variable value (expect changed=true)
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '{{set_value}}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_var.yml changed=true output={{result}} var_name={{set_name}} var_value='{{set_value}}'
- set_fact:
    set_name: wait_timeout
    set_value: 500
- name: set mysql variable to a temp value
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: 200
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- name: update mysql variable value (expect changed=true)
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '{{set_value}}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_var.yml changed=true output={{result}} var_name={{set_name}} var_value='{{set_value}}'
- name: set mysql variable value to an expression
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: max_tmp_tables
    value: 1024*4
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_fail_msg.yml output={{result}}  msg='Incorrect argument type to
    variable'
- name: set mysql variable value to a number out of range
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: max_tmp_tables
    value: -1
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_fail_msg.yml output={{result}}  msg='Truncated incorrect'
- name: set mysql variable value to a non-valid value number
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: max_tmp_tables
    value: TEST
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_fail_msg.yml output={{result}}  msg='Incorrect argument type to
    variable'
- name: set a non mysql variable
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: my_sql_variable
    value: true
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_fail_msg.yml output={{result}}  msg='Variable not available'
- name: set value of a read only mysql variable
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: character_set_system
    value: utf16
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- include: assert_fail_msg.yml output={{result}}  msg='read only variable'
- name: create mysql user
  community.dumping_ground.mysql_user:
    name: '{{user}}'
    password: '{{password}}'
    state: present
    priv: '*.*:ALL'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- set_fact:
    set_name: wait_timeout
    set_value: 77
- name: query mysql_variable using login_user and password_password
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    login_user: '{{user}}'
    login_password: '{{password}}'
- include: assert_var_output.yml changed=false output={{result}} var_name={{set_name}}
- name: set mysql variable to temp value using user login and password (expect changed=true)
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: 20
    login_user: '{{user}}'
    login_password: '{{password}}'
- name: update mysql variable value using user login and password (expect changed=true)
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '{{set_value}}'
    login_user: '{{user}}'
    login_password: '{{password}}'
- include: assert_var.yml changed=true output={{result}} var_name={{set_name}} var_value='{{set_value}}'
- set_fact:
    set_name: connect_timeout
    set_value: 10
- name: query mysql_variable using incorrect login_password
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    login_user: '{{user}}'
    login_password: wrongpassword
- include: assert_fail_msg.yml output={{result}}  msg='unable to connect to database'
- name: update mysql variable value using incorrect login_password (expect failed=true)
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: '{{set_name}}'
    value: '{{set_value}}'
    login_user: '{{user}}'
    login_password: this is an incorrect password
- include: assert_fail_msg.yml output={{result}}  msg='unable to connect to database'
- name: query mysql_variable using incorrect login_host
  register: result
  ignore_errors: true
  community.dumping_ground.mysql_variables:
    variable: wait_timeout
    login_host: 12.0.0.9
    login_user: '{{user}}'
    login_password: '{{password}}'
    connect_timeout: 5
- include: assert_fail_msg.yml output={{result}}  msg='unable to connect to database'
- name: remove mysql_user {{user}}
  community.dumping_ground.mysql_user:
    name: '{{user}}'
    state: absent
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
- name: update mysql variable value (expect changed=true) in persist mode
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{ set_name }}'
    value: '{{ set_value }}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
    mode: persist
- assert:
    that:
    - result.queries == ["SET PERSIST `{{ set_name }}` = {{ set_value }}"]
- include: assert_var.yml changed=true output={{result}} var_name={{set_name}} var_value='{{set_value}}'
- name: try to update mysql variable value (expect changed=false) in persist mode
    again
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{ set_name }}'
    value: '{{ set_value }}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
    mode: persist
- include: assert_var.yml changed=false output={{result}} var_name={{set_name}} var_value='{{set_value}}'
- name: set mysql variable to a temp value
  community.dumping_ground.mysql_variables:
    variable: '{{ set_name }}'
    value: '200'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
    mode: persist
- name: update mysql variable value (expect changed=true) in persist_only mode
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{ set_name }}'
    value: '{{ set_value }}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
    mode: persist_only
- assert:
    that:
    - result is changed
    - result.queries == ["SET PERSIST_ONLY `{{ set_name }}` = {{ set_value }}"]
- name: try to update mysql variable value (expect changed=false) in persist_only
    mode again
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{ set_name }}'
    value: '{{ set_value }}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
    mode: persist_only
- assert:
    that:
    - result is not changed
- set_fact:
    set_name: max_connections
    set_value: 105
    def_val: 151
- name: update mysql variable value (expect changed=true) in persist_only mode
  register: result
  community.dumping_ground.mysql_variables:
    variable: '{{ set_name }}'
    value: '{{ set_value }}'
    login_unix_socket: '{{ mysql_socket }}'
    login_user: root
    login_password: '{{ root_pass }}'
    mode: persist_only
- include: assert_var.yml changed=true output={{result}} var_name={{set_name}} var_value='{{def_val}}'
