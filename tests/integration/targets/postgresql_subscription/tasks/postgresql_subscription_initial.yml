- vars:
    task_parameters:
      become_user: '{{ pg_user }}'
      become: true
      register: result
    pg_parameters:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
  block:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create roles to test owner parameter
    loop:
    - '{{ test_role1 }}'
    - '{{ test_role2 }}'
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ item }}'
      role_attr_flags: SUPERUSER,LOGIN
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create subscription
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications: '{{ test_pub }}'
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["CREATE SUBSCRIPTION test CONNECTION 'host=127.0.0.1 port={{
        master_port }} user={{ replication_role }} password={{ replication_pass }}
        dbname={{ test_db }}' PUBLICATION {{ test_pub }}"]
      - result.exists == true
      - result.initial_state == {}
      - result.final_state.owner == '{{ pg_user }}'
      - result.final_state.enabled == true
      - result.final_state.publications == ["{{ test_pub }}"]
      - result.final_state.synccommit == true
      - result.final_state.slotname == '{{ test_subscription }}'
      - result.final_state.conninfo.dbname == '{{ test_db }}'
      - result.final_state.conninfo.host == '127.0.0.1'
      - result.final_state.conninfo.port == {{ master_port }}
      - result.final_state.conninfo.user == '{{ replication_role }}'
      - result.final_state.conninfo.password == '{{ replication_pass }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Stat mode in check mode
    check_mode: true
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
      - result.final_state == result.initial_state
      - result.final_state.owner == '{{ pg_user }}'
      - result.final_state.enabled == true
      - result.final_state.publications == ["{{ test_pub }}"]
      - result.final_state.synccommit == true
      - result.final_state.slotname == '{{ test_subscription }}'
      - result.final_state.conninfo.dbname == '{{ test_db }}'
      - result.final_state.conninfo.host == '127.0.0.1'
      - result.final_state.conninfo.port == {{ master_port }}
      - result.final_state.conninfo.user == '{{ replication_role }}'
      - result.final_state.conninfo.password == '{{ replication_pass }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Stat mode
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
      - result.final_state == result.initial_state
      - result.final_state.owner == '{{ pg_user }}'
      - result.final_state.enabled == true
      - result.final_state.publications == ["{{ test_pub }}"]
      - result.final_state.synccommit == true
      - result.final_state.slotname == '{{ test_subscription }}'
      - result.final_state.conninfo.dbname == '{{ test_db }}'
      - result.final_state.conninfo.host == '127.0.0.1'
      - result.final_state.conninfo.port == {{ master_port }}
      - result.final_state.conninfo.user == '{{ replication_role }}'
      - result.final_state.conninfo.password == '{{ replication_pass }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop subscription in check mode
    check_mode: true
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }}"]
      - result.final_state == result.initial_state
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the subscription exists
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop subscription
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }}"]
      - result.final_state != result.initial_state
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the subscription doesn't exist
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == false
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create with owner
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications: '{{ test_pub }}'
      owner: '{{ test_role1 }}'
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'
  - assert:
      that:
      - result.final_state.owner == '{{ test_role1 }}'
      - result.queries[1] == 'ALTER SUBSCRIPTION {{ test_subscription }} OWNER TO
        "{{ test_role1 }}"'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to set this owner again
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications: '{{ test_pub }}'
      owner: '{{ test_role1 }}'
  - assert:
      that:
      - result is not changed
      - result.initial_state == result.final_state
      - result.final_state.owner == '{{ test_role1 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check owner
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
      - result.initial_state.owner == '{{ test_role1 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Set another owner in check mode
    check_mode: true
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications: '{{ test_pub }}'
      owner: '{{ test_role2 }}'
  - assert:
      that:
      - result is changed
      - result.initial_state == result.final_state
      - result.final_state.owner == '{{ test_role1 }}'
      - result.queries == ['ALTER SUBSCRIPTION {{ test_subscription }} OWNER TO "{{
        test_role2 }}"']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check owner
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
      - result.initial_state.owner == '{{ test_role1 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Set another owner
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications: '{{ test_pub }}'
      owner: '{{ test_role2 }}'
  - assert:
      that:
      - result is changed
      - result.initial_state != result.final_state
      - result.final_state.owner == '{{ test_role2 }}'
      - result.queries == ['ALTER SUBSCRIPTION {{ test_subscription }} OWNER TO "{{
        test_role2 }}"']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check owner
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
      - result.initial_state.owner == '{{ test_role2 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop subscription cascade in check mode
    check_mode: true
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
      cascade: true
  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }} CASCADE"]
      - result.final_state == result.initial_state
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the subscription exists
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop subscription cascade
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
      cascade: true
  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }} CASCADE"]
      - result.final_state != result.initial_state
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the subscription doesn't exist
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == false
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create subscription with subsparams
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications: '{{ test_pub }}'
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'
      subsparams:
        enabled: false
        synchronous_commit: false
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["CREATE SUBSCRIPTION test CONNECTION 'host=127.0.0.1 port={{
        master_port }} user={{ replication_role }} password={{ replication_pass }}
        dbname={{ test_db }}' PUBLICATION {{ test_pub }} WITH (enabled = false, synchronous_commit
        = false)"]
      - result.exists == true
      - result.final_state.enabled == false
      - result.final_state.synccommit == false
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Stat mode
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result.name == '{{ test_subscription }}'
      - result.final_state.enabled == false
      - result.final_state.synccommit == false
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Enable changed params
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      publications: '{{ test_pub }}'
      subsparams:
        enabled: true
        synchronous_commit: true
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["ALTER SUBSCRIPTION {{ test_subscription }} ENABLE", "ALTER
        SUBSCRIPTION {{ test_subscription }} SET (synchronous_commit = true)"]
      - result.exists == true
      - result.final_state.enabled == true
      - result.final_state.synccommit == true
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Stat mode
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result.name == '{{ test_subscription }}'
      - result.final_state.enabled == true
      - result.final_state.synccommit == true
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Enable the same params again
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      publications: '{{ test_pub }}'
      subsparams:
        enabled: true
        synchronous_commit: true
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.queries == []
      - result.exists == true
      - result.final_state == result.initial_state
      - result.final_state.enabled == true
      - result.final_state.synccommit == true
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change publications in check mode
    check_mode: true
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications:
      - '{{ test_pub }}'
      - '{{ test_pub2 }}'
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.final_state.publications == result.initial_state.publications
      - result.final_state.publications == ['{{ test_pub }}']
      - result.queries == ['ALTER SUBSCRIPTION {{ test_subscription }} SET PUBLICATION
        {{ test_pub }}, {{ test_pub2 }}']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check publications
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result.name == '{{ test_subscription }}'
      - result.final_state.publications == ['{{ test_pub }}']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change publications
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications:
      - '{{ test_pub }}'
      - '{{ test_pub2 }}'
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.final_state.publications != result.initial_state.publications
      - result.final_state.publications == ['{{ test_pub }}', '{{ test_pub2 }}']
      - result.queries == ['ALTER SUBSCRIPTION {{ test_subscription }} SET PUBLICATION
        {{ test_pub }}, {{ test_pub2 }}']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check publications
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result.name == '{{ test_subscription }}'
      - result.final_state.publications == ['{{ test_pub }}', '{{ test_pub2 }}']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change publications with the same values again
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      publications:
      - '{{ test_pub }}'
      - '{{ test_pub2 }}'
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.final_state.publications == result.initial_state.publications
      - result.final_state.publications == ['{{ test_pub }}', '{{ test_pub2 }}']
      - result.queries == []
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change conninfo in check mode
    check_mode: true
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'
        connect_timeout: '{{ conn_timeout }}'
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["ALTER SUBSCRIPTION {{ test_subscription }} CONNECTION
        'host=127.0.0.1 port={{ master_port }} user={{ replication_role }} password={{
        replication_pass }} dbname={{ test_db }} connect_timeout={{ conn_timeout }}'"]
      - result.initial_state.conninfo == result.final_state.conninfo
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change conninfo
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      relinfo: true
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'
        connect_timeout: '{{ conn_timeout }}'
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["ALTER SUBSCRIPTION {{ test_subscription }} CONNECTION
        'host=127.0.0.1 port={{ master_port }} user={{ replication_role }} password={{
        replication_pass }} dbname={{ test_db }} connect_timeout={{ conn_timeout }}'"]
      - result.initial_state.conninfo != result.final_state.conninfo
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check publications
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
  - assert:
      that:
      - result.name == '{{ test_subscription }}'
      - result.final_state.conninfo.connect_timeout == {{ conn_timeout }}
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to change conninfo again with the same values
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'
        connect_timeout: '{{ conn_timeout }}'
  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.queries == []
      - result.initial_state.conninfo == result.final_state.conninfo
      - result.final_state.conninfo.connect_timeout == {{ conn_timeout }}
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Refresh in check mode
    check_mode: true
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: refresh
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["ALTER SUBSCRIPTION {{ test_subscription }} REFRESH PUBLICATION"]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Refresh
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: refresh
  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["ALTER SUBSCRIPTION {{ test_subscription }} REFRESH PUBLICATION"]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Get relinfo
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
      relinfo: true
  - assert:
      that:
      - result.name == '{{ test_subscription }}'
      - result.final_state.relinfo[0].relname == '{{ test_table1 }}'
      - result.final_state == result.initial_state
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop subscription
    community.dumping_ground.postgresql_subscription:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
