- vars:
    test_user: hello.user.with.dots
    test_user2: hello
    test_group1: group1
    test_group2: group2
    test_table: test
    task_parameters:
      become_user: '{{ pg_user }}'
      become: true
      register: result
    pg_parameters:
      login_user: '{{ pg_user }}'
      login_db: postgres
  block:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create role in check_mode
    check_mode: true
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user doesn't exist
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_user }}'
  - assert:
      that:
      - result.rowcount == 0
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create role in actual mode
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user exists
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_user }}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to create role again in check_mode
    check_mode: true
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user exists
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_user }}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to create role again
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user exists
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_user }}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop role in check_mode
    check_mode: true
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      state: absent
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user actually exists
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_user }}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop role in actual mode
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      state: absent
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user doesn't exist
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_user }}'
  - assert:
      that:
      - result.rowcount == 0
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to drop role in check mode again
    check_mode: true
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      state: absent
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to drop role in actual mode again
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      state: absent
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create role with password, passed as hashed md5
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      password: md59543f1d82624df2b31672ec0f7050460
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that the user exist with a proper password
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_authid WHERE rolname = '{{ test_user }}' and rolpassword
        = 'md59543f1d82624df2b31672ec0f7050460'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Test no_password_changes
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      password: u123
      no_password_changes: true
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that nothing changed
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_authid WHERE rolname = '{{ test_user }}' and rolpassword
        = 'md59543f1d82624df2b31672ec0f7050460'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change password, passed as unencrypted
    when: postgres_version_resp.stdout is version('10', '<')
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      password: myunencryptedpass
      encrypted: false
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
    when: postgres_version_resp.stdout is version('10', '<')
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that the user exist with the unencrypted password
    when: postgres_version_resp.stdout is version('10', '<')
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_authid WHERE rolname = '{{ test_user }}' and rolpassword
        = 'myunencryptedpass'
  - assert:
      that:
      - result.rowcount == 1
    when: postgres_version_resp.stdout is version('10', '<')
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change password, explicit encrypted=yes
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      password: myunencryptedpass
      encrypted: true
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that the user exist with encrypted password
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_authid WHERE rolname = '{{ test_user }}' and rolpassword
        != 'myunencryptedpass'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Change rolvaliduntil attribute
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      expires: Jan 31 2020
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the prev step
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: 'SELECT rolname FROM pg_authid WHERE rolname = ''{{ test_user }}'' AND
        rolvaliduntil::text like ''2020-01-31%''

        '
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to set the same rolvaliduntil value again
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      expires: Jan 31 2020
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that nothing changed
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: 'SELECT rolname FROM pg_authid WHERE rolname = ''{{ test_user }}'' AND
        rolvaliduntil::text like ''2020-01-31%''

        '
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Set role attributes
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      role_attr_flags: CREATEROLE,CREATEDB
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the prev step
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: 'SELECT rolname FROM pg_authid WHERE rolname = ''{{ test_user }}'' AND
        rolcreaterole = ''t'' and rolcreatedb = ''t''

        '
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Set the same role attributes again
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      role_attr_flags: CREATEROLE,CREATEDB
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the prev step
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: 'SELECT rolname FROM pg_authid WHERE rolname = ''{{ test_user }}'' AND
        rolcreaterole = ''t'' and rolcreatedb = ''t''

        '
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Set role attributes
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      role_attr_flags: NOCREATEROLE,NOCREATEDB
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the prev step
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: 'SELECT rolname FROM pg_authid WHERE rolname = ''{{ test_user }}'' AND
        rolcreaterole = ''f'' and rolcreatedb = ''f''

        '
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Set role attributes
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      role_attr_flags: NOCREATEROLE,NOCREATEDB
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_user }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the prev step
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: 'SELECT rolname FROM pg_authid WHERE rolname = ''{{ test_user }}'' AND
        rolcreaterole = ''f'' and rolcreatedb = ''f''

        '
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create test table
    community.dumping_ground.postgresql_table:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_table }}'
      columns:
      - id int
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Insert data to test table
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: INSERT INTO {{ test_table }} (id) VALUES ('1')
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that test_user is not allowed to read the data
    ignore_errors: true
    community.dumping_ground.postgresql_query:
      db: postgres
      login_user: '{{ pg_user }}'
      session_role: '{{ test_user }}'
      query: SELECT * FROM {{ test_table }}
  - assert:
      that:
      - result is failed
      - '''permission denied'' in result.msg'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Grant privileges
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      priv: '{{ test_table }}:SELECT'
  - assert:
      that:
      - result is changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that test_user is allowed to read the data
    community.dumping_ground.postgresql_query:
      db: postgres
      login_user: '{{ pg_user }}'
      session_role: '{{ test_user }}'
      query: SELECT * FROM {{ test_table }}
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Grant the same privileges again
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      priv: '{{ test_table }}:SELECT'
  - assert:
      that:
      - result is not changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Remove test table
    community.dumping_ground.postgresql_table:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_table }}'
      state: absent
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create role for test
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user2 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create test table, set owner as test_user
    community.dumping_ground.postgresql_table:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_table }}'
      owner: '{{ test_user2 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Test fail_on_user
    ignore_errors: true
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user2 }}'
      state: absent
  - assert:
      that:
      - result is failed
      - result.msg == 'Unable to remove user'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Test fail_on_user
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      fail_on_user: false
  - assert:
      that:
      - result is not changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create test group
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_group2 }}'
      role_attr_flags: NOLOGIN
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create role test_group1 and grant test_group2 to test_group1 in check_mode
    check_mode: true
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_group1 }}'
      groups: '{{ test_group2 }}'
      role_attr_flags: NOLOGIN
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_group1 }}'
      - result.queries == ['CREATE USER "{{ test_group1 }}" NOLOGIN', 'GRANT "{{ test_group2
        }}" TO "{{ test_group1 }}"']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user doesn't exist
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_group1 }}'
  - assert:
      that:
      - result.rowcount == 0
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check membership
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT grolist FROM pg_group WHERE groname = '{{ test_group2 }}' AND
        grolist != '{}'
  - assert:
      that:
      - result.rowcount == 0
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create role test_group1 and grant test_group2 to test_group1
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_group1 }}'
      groups: '{{ test_group2 }}'
      role_attr_flags: NOLOGIN
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_group1 }}'
      - result.queries == ['CREATE USER "{{ test_group1 }}" NOLOGIN', 'GRANT "{{ test_group2
        }}" TO "{{ test_group1 }}"']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check that the user exists
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT rolname FROM pg_roles WHERE rolname = '{{ test_group1 }}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check membership
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT grolist FROM pg_group WHERE groname = '{{ test_group2 }}' AND
        grolist != '{}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Grant test_group2 to test_group1 again
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_group1 }}'
      groups: '{{ test_group2 }}'
  - assert:
      that:
      - result is not changed
      - result.user == '{{ test_group1 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check membership
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT grolist FROM pg_group WHERE groname = '{{ test_group2 }}' AND
        grolist != '{}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Grant groups to existent role
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_user }}'
      groups:
      - '{{ test_group1 }}'
      - '{{ test_group2 }}'
  - assert:
      that:
      - result is changed
      - result.user == '{{ test_user }}'
      - result.queries == ['GRANT "{{ test_group1 }}" TO "{{ test_user }}"', 'GRANT
        "{{ test_group2 }}" TO "{{ test_user }}"']
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: check membership
    community.dumping_ground.postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT * FROM pg_group WHERE groname in ('{{ test_group1 }}', '{{ test_group2
        }}') AND grolist != '{}'
  - assert:
      that:
      - result.rowcount == 2
  always:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop test table
    community.dumping_ground.postgresql_table:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_table }}'
      state: absent
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Drop test user
    loop:
    - '{{ test_user }}'
    - '{{ test_user2 }}'
    - '{{ test_group1 }}'
    - '{{ test_group2 }}'
    community.dumping_ground.postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ item }}'
      state: absent
